{"tasks":[{"environment":{},"displayName":"$(servicename)- Stop Service","alwaysRun":false,"continueOnError":false,"condition":"succeeded()","enabled":true,"timeoutInMinutes":0,"retryCountOnTaskFailure":0,"inputs":{"Script":"# Check existence of service, stop it\nif (Get-Service \"$(servicename)\" -ErrorAction SilentlyContinue)\n{\n    Get-Service -Name \"$(servicename)\" | Stop-Service -Force\n}\n","ScriptArguments":""},"task":{"id":"31f040e5-e040-4336-878a-59a493355534","versionSpec":"1.*","definitionType":"task"}},{"environment":{},"displayName":"$(servicename)- Copy Service","alwaysRun":false,"continueOnError":false,"condition":"succeeded()","enabled":true,"timeoutInMinutes":0,"retryCountOnTaskFailure":0,"inputs":{"SourceFolder":"$(sourcefolder)","Contents":"**","TargetFolder":"$(targetfolder)","CleanTargetFolder":"false","OverWrite":"false","flattenFolders":"false","preserveTimestamp":"false"},"task":{"id":"5bfb729a-a7c8-4a78-a7c3-8d717bb7c13c","versionSpec":"2.*","definitionType":"task"}},{"environment":{},"displayName":"Replace tokens in **/*.config","alwaysRun":false,"continueOnError":false,"condition":"succeeded()","enabled":true,"timeoutInMinutes":0,"retryCountOnTaskFailure":0,"inputs":{"rootDirectory":"$(targetfolder)","targetFiles":"**/*.config","encoding":"auto","writeBOM":"true","escapeType":"auto","escapeChar":"","charsToEscape":"","verbosity":"normal","actionOnMissing":"warn","keepToken":"false","tokenPrefix":"#{","tokenSuffix":"}#","useLegacyPattern":"false","emptyValue":"(empty)","variableFiles":"","variableSeparator":".","enableTelemetry":"true"},"task":{"id":"a8515ec8-7254-4ffd-912c-86772e2b5962","versionSpec":"3.*","definitionType":"task"}},{"environment":{},"displayName":"$(servicename)- Start Service","alwaysRun":false,"continueOnError":false,"condition":"succeeded()","enabled":true,"timeoutInMinutes":0,"retryCountOnTaskFailure":0,"inputs":{"Script":"#If the service doesn't exist, create a new instance\nif (!(Get-Service -Name \"$(servicename)\" -ErrorAction SilentlyContinue)) \n{ \n   #Register and create the application as service\n   New-Service -Name \"$(servicename)\" -BinaryPathName \"$(servicepath)$(servicebin)\" -DisplayName \"$(servicename)\" -StartupType Automatic -Description \"$(servicename)\" \n   \n   #Wait 10 seconds before continue to start the service\n   Start-Sleep -s 10\n}\n\n$svc=gwmi win32_service -filter \"name='$(servicename)'\"\n$svc.change($null,$null,$null,$null,$null,$null,\".\\$(serviceuser)\",\"$(servicepassword)\",$null,$null,$null)\n\nsc.exe failure \"$(servicename)\" actions= restart/300000/restart/300000/restart/300000 reset= 86400 \n\nsc.exe config \"$(servicename)\" start= delayed-auto\n\n#Start the (created) service\nStart-Service -Name \"$(servicename)\"\n","ScriptArguments":""},"task":{"id":"31f040e5-e040-4336-878a-59a493355534","versionSpec":"1.*","definitionType":"task"}}],"runsOn":["Agent","DeploymentGroup"],"revision":6,"createdBy":{"displayName":"Junimer Faustino","id":"e6b8d14e-bffa-62b8-987c-5d028151ee94","uniqueName":"junimer@prechart.com"},"createdOn":"2020-08-06T02:04:11.517Z","modifiedBy":{"displayName":"Junimer Faustino","id":"e6b8d14e-bffa-62b8-987c-5d028151ee94","uniqueName":"junimer@prechart.com"},"modifiedOn":"2020-08-06T05:57:12.433Z","comment":"","id":"fc2cf6b2-92de-4f0f-8e39-30f7a95b35ba","name":"Prechart-Deploy Service","version":{"major":1,"minor":0,"patch":0,"isTest":false},"iconUrl":"https://cdn.vsassets.io/v/M172_20200804.1/_content/icon-meta-task.png","friendlyName":"Prechart-Deploy Service","description":"","category":"Deploy","definitionType":"metaTask","author":"Junimer Faustino","demands":[],"groups":[],"inputs":[{"aliases":[],"options":{},"properties":{},"name":"servicebin","label":"servicebin","defaultValue":"","required":true,"type":"string","helpMarkDown":"","groupName":""},{"aliases":[],"options":{},"properties":{},"name":"servicename","label":"servicename","defaultValue":"","required":true,"type":"string","helpMarkDown":"","groupName":""},{"aliases":[],"options":{},"properties":{},"name":"servicepassword","label":"servicepassword","defaultValue":"","required":true,"type":"string","helpMarkDown":"","groupName":""},{"aliases":[],"options":{},"properties":{},"name":"servicepath","label":"servicepath","defaultValue":"","required":true,"type":"string","helpMarkDown":"","groupName":""},{"aliases":[],"options":{},"properties":{},"name":"serviceuser","label":"serviceuser","defaultValue":"","required":true,"type":"string","helpMarkDown":"","groupName":""},{"aliases":[],"options":{},"properties":{},"name":"sourcefolder","label":"sourcefolder","defaultValue":"","required":true,"type":"filePath","helpMarkDown":"The source folder that the copy pattern(s) will be run from.  Empty is the root of the repo.  Use [variables](https://go.microsoft.com/fwlink/?LinkID=550988) if files are not in the repo. Example: $(agent.builddirectory)","groupName":""},{"aliases":[],"options":{},"properties":{},"name":"targetfolder","label":"targetfolder","defaultValue":"","required":true,"type":"string","helpMarkDown":"Target folder or UNC path files will copy to. You can use [variables](http://go.microsoft.com/fwlink/?LinkID=550988). Example: $(build.artifactstagingdirectory)","groupName":""}],"satisfies":[],"sourceDefinitions":[],"dataSourceBindings":[],"instanceNameFormat":"Task group: Prechart-Deploy Service $(servicebin)","preJobExecution":{},"execution":{},"postJobExecution":{}}